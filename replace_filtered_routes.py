import re
from pathlib import Path
path = Path('src/client/pages/inara.js')
text = path.read_text()
old = "        const nextRoutes = Array.isArray(data?.routes)\n          ? data.routes\n          : Array.isArray(data?.results)\n            ? data.results\n            : []\n\n        const filteredRoutes = Number.isFinite(minProfitValue)\n          ? nextRoutes.filter(route => {\n              const numericProfit = typeof route?.summary?.profitPerUnit === 'number' && !Number.isNaN(route.summary.profitPerUnit)\n                ? route.summary.profitPerUnit\n                : (typeof route?.profitPerUnit === 'number' && !Number.isNaN(route.profitPerUnit) ? route.profitPerUnit : null)\n              if (numericProfit !== null) return numericProfit >= minProfitValue\n              const profitText = route?.summary?.profitPerUnitText || route?.profitPerUnitText\n              if (typeof profitText === 'string' && profitText.trim()) {\n                const parsed = Number(profitText.replace(/[^0-9.-]/g, ''))\n                if (!Number.isNaN(parsed)) return parsed >= minProfitValue\n              }\n              return true\n            })\n          : nextRoutes\n\n        setRoutes(filteredRoutes)\n"
if old not in text:
    raise SystemExit('original block not found')
new = "        const nextRoutes = Array.isArray(data?.routes)\n          ? data.routes\n          : Array.isArray(data?.results)\n            ? data.results\n            : []\n\n        const distanceFilterValue = Number.isFinite(parsedDistanceFilter) ? parsedDistanceFilter : DISTANCE_FILTER_MAX\n        const hasDistanceFilter = Number.isFinite(distanceFilterValue) && distanceFilterValue < DISTANCE_FILTER_MAX\n\n        const filteredRoutes = nextRoutes.filter(route => {\n          if (Number.isFinite(minProfitValue)) {\n            const numericProfit = typeof route?.summary?.profitPerUnit === 'number' && !Number.isNaN(route.summary.profitPerUnit)\n              ? route.summary.profitPerUnit\n              : (typeof route?.profitPerUnit === 'number' && !Number.isNaN(route.profitPerUnit) ? route.profitPerUnit : null)\n            if (numericProfit !== null && numericProfit < minProfitValue) return false\n\n            if (numericProfit === null) {\n              const profitText = route?.summary?.profitPerUnitText || route?.profitPerUnitText\n              if (typeof profitText === 'string' && profitText.trim()) {\n                const parsed = Number(profitText.replace(/[^0-9.-]/g, ''))\n                if (!Number.isNaN(parsed) && parsed < minProfitValue) return false\n              }\n            }\n          }\n\n          if (hasDistanceFilter) {\n            const numericDistance = typeof route?.summary?.routeDistanceLy === 'number' && !Number.isNaN(route.summary.routeDistanceLy)\n              ? route.summary.routeDistanceLy\n              : (typeof route?.summary?.distanceLy === 'number' && !Number.isNaN(route.summary.distanceLy)\n                ? route.summary.distanceLy\n                : (typeof route?.distanceLy === 'number' && !Number.isNaN(route.distanceLy)\n                  ? route.distanceLy\n                  : (typeof route?.distance === 'number' && !Number.isNaN(route.distance) ? route.distance : null)))\n            if (numericDistance !== null && numericDistance > distanceFilterValue) return false\n          }\n\n          return true\n        })\n\n        setRoutes(filteredRoutes)\n"
text = text.replace(old, new)
path.write_text(text)
